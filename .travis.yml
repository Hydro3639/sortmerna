#==============================================================================
# FILE: .travis.yml
# Travis CI build configuration
#==============================================================================
dist: xenial
language: cpp
#sudo: false # required

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
          #  - zlib1g-dev # for RocksDB # build from sources
      env:
        - MATRIX_EVAL="ENV=Linux+gcc-7 && CC=gcc-7 && CXX=g++-7"
      
    - os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          # the latest official clang on Xenial is clang-4.0 [https://packages.ubuntu.com/xenial/devel] => use llvm
            - llvm-toolchain-xenial-7
          #  - llvm-toolchain-trusty-6.0
          packages:
            - clang-7
          #  - clang-6.0
          #  - zlib1g-dev # for RocksDB
      env:
        - MATRIX_EVAL="ENV=Linux+LLVM_clang-7 && CC=clang-7 && CXX=clang++-7"
      #  - MATRIX_EVAL="ENV=Linux+LLVM_clang-6.0 && CC=clang-6.0 && CXX=clang++-6.0"
      
    - os: osx
      osx_image: xcode9.2 # OS X 10.12 Sierra
      compiler: clang
      env:
        - MATRIX_EVAL="ENV=Osx+clang-9.0-APPL"
        #- MATRIX_EVAL="CC=clang-9.0 && CXX=clang++-9.0" # this screws the Miniconda installation
      
    # this is probably no different from osx+clang. MAC GCC seems to be just an interface to clang.
    - os: osx
      osx_image: xcode9.2 # OS X 10.12 Sierra
      compiler: gcc
      env:
        - MATRIX_EVAL="ENV=Osx+gcc-APPL && CC=gcc && CXX=g++ && gcc --version" # default gcc installed with OSX
        #- MATRIX_EVAL="ENV=Osx+gcc-7 && brew install gcc && brew link --overwrite gcc && CC=gcc-7 && CXX=g++-7" # need to fix conflicts with pre-installed gcc
        
# does nothing
  exclude:
    - os : linux
      compiler: clang
      
    - os : osx
      compiler: gcc


before_install:
  - eval "${MATRIX_EVAL}"
  
install:
  # $HOME  /home/travis (Linux), /Users/travis (MacOS), /c/Users/travis (Windows)
  - pushd $HOME

  # CMake. Travis' default on Xenial is 3.12.4 -> upgrade to 3.13
  - echo $PWD
  - echo $PATH
  - which cmake
  - cmake --version
  # Linux+CLang - use binary distro. Problem building CMake from source
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then 
      sudo apt remove cmake; 
      sudo apt purge --auto-remove cmake;
      wget https://github.com/Kitware/CMake/releases/download/v3.13.2/cmake-3.13.2-Linux-x86_64.sh;
      chmod +x cmake-3.13.2-Linux-x86_64.sh;
      ./cmake-3.13.2-Linux-x86_64.sh --skip-license;
      /usr/local/bin/cmake --version;
      export PATH=/usr/local/bin:$PATH;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew upgrade cmake;
    fi
  # OSX - build from source. Not able to use either cmake-3.13.2-Darwin-x86_64.dmg (image not recognized/non-mountable) 
  #       or cmake-3.13.2-Darwin-x86_64.tar.gz (tar: Unrecognized archive format)
  #- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
  #    wget https://github.com/Kitware/CMake/releases/download/v3.13.2/cmake-3.13.2.tar.gz ;
  #    tar xzf cmake-3.13.2.tar.gz;
  #    pushd cmake-3.13.2;
  #    ./bootstrap;
  #    make;
  #    make install;
  #    ls -l /usr/local/bin/cmake;
  #  fi
  - echo $PATH
  - which cmake
  - cmake --version
  - popd

  # Miniconda
  #- wget http://repo.continuum.io/miniconda/Miniconda3-3.7.3-Linux-x86_64.sh -O miniconda.sh;
  #- wget http://repo.continuum.io/miniconda/Miniconda3-3.7.3-MacOSX-x86_64.sh -O miniconda.sh;
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      wget http://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
    fi
  - chmod +x miniconda.sh
  - ./miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - conda update --yes conda
  - which pip
  - pip install numpy
  - pip install scipy
  - pip install scikit-bio
  #- conda config --add channels https://conda.anaconda.org/biobuilds
  #- conda create --yes -n env_name python=3.5 numpy scipy
  #- source activate env_name
#  - pip install scikit-bio==0.2.3
#  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update ; fi
#  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install zlib rocksdb rapidjson ; fi  # brew install gcc5  cmake is installed by default
    # C++14
#  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CC" == "gcc" ]]; then sudo apt-get install gcc-7 g++-7 ; fi # -qq g++-7
#  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CC" == "gcc" ]]; then sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7 ; fi # '90' priority
  # for building RocksDB
#  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install -y zlib1g-dev ; fi # libgflags-dev libsnappy-dev libbz2-dev libzstd-dev  cmake installed by default

script:
  - echo "TRAVIS_BUILD_DIR=${TRAVIS_BUILD_DIR}" # /home/travis/build/biocore/sortmerna
  - pushd "${TRAVIS_BUILD_DIR}"

  # Install 3rd party libraries
  - pushd ./3rdparty;

  # rapidjson
  - git clone https://github.com/Tencent/rapidjson.git
  - mkdir -p rapidjson/build/Release
  - pushd rapidjson/build/Release
  - |
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release \
    -DRAPIDJSON_BUILD_EXAMPLES=OFF  -DRAPIDJSON_BUILD_DOC=OFF -DCMAKE_INSTALL_PREFIX=../../dist ../.. ;
  - cmake --build .
  - cmake --build . --target install
  - popd

  # ZLib
  - git clone https://github.com/madler/zlib.git;
  - mkdir -p zlib/build/Release;
  - pushd zlib/build/Release;
  - cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../dist ../.. ;
  - cmake --build . ;
  - cmake --build . --target install;
  - ls -lrt ../../dist/lib/ ; 
  - popd;

  # RocksDB
  - git clone https://github.com/facebook/rocksdb.git;
  - pushd rocksdb
  - ROCKSDB_RELEASE=v5.17.2; git checkout tags/${ROCKSDB_RELEASE}
  # modify thirdparty.inc
  - mv thirdparty.inc _thirdparty.inc
  - |
    ZLIB_ROOT=${TRAVIS_BUILD_DIR}/3rdparty/zlib/dist; \
    sed -E -e "s|set\(ZLIB_HOME .*\)|set\(ZLIB_HOME ${ZLIB_ROOT}\)|" \
    -e 's/set\(ZLIB_INCLUDE .*\)/set\(ZLIB_INCLUDE ${ZLIB_HOME}\/include\)/' \
    -e 's/set\(ZLIB_LIB_DEBUG .*\)/set\(ZLIB_LIB_DEBUG ${ZLIB_HOME}\/lib\/libz\.a\)/' \
    -e 's/set\(ZLIB_LIB_RELEASE .*\)/set\(ZLIB_LIB_RELEASE ${ZLIB_HOME}\/lib\/libz\.a\)/' \
    _thirdparty.inc > thirdparty.inc
  - cat thirdparty.inc
  - mkdir -p build/Release;
  - pushd build/Release;
  - |
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../dist \
    -DWITH_ZLIB=1 -DWITH_GFLAGS=0 -DPORTABLE=1 -DWITH_TESTS=0 -DWITH_TOOLS=0 ../.. ;
    #Trusty: cmake -E env CXXFLAGS="-Wno-error=maybe-uninitialized" cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DPORTABLE=1 -DWITH_ZLIB=1 -DWITH_TESTS=0 -DWITH_TOOLS=0 -DEXTRA_CXX_FLAGS_RELEASE="-pthread" ../.. ;
    #Trusty: cmake -E env CXXFLAGS="-Wno-error=unused-private-field" cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DPORTABLE=1 -DWITH_ZLIB=1 -DWITH_TESTS=0 -DWITH_TOOLS=0 ../.. ;
  #- if [[ "$ENV" == "Linux+LLVM_clang-6.0" ]]; then
  #    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../dist -DWITH_ZLIB=1 -DWITH_GFLAGS=0 -DPORTABLE=1 -DWITH_TESTS=0 -DWITH_TOOLS=0 ../.. ;
  #  fi
  - cmake --build . ;
  - cmake --build . --target install;
  - popd; # return to rocksdb
  - popd; # return to 3rdparty
  - popd; # return to sortmerna

  # build SortmeRNA
  - mkdir -p build/Release; pushd build/Release;
  - |
    cmake -G "Unix Makefiles" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=../../dist \
    -DZLIB_ROOT=../../3rdparty/zlib/dist \
    -DZLIB_LIBRARY_RELEASE=../../3rdparty/zlib/dist/lib/libz.a \
    -DZLIB_LIBRARY_DEBUG=../../3rdparty/zlib/dist/lib/libzd.a \
    -DROCKSDB_HOME=../../3rdparty/rocksdb/dist \
    -DROCKSDB_3RDPARTY_INC=1 \
    -DRAPIDJSON_HOME=../../3rdparty/rapidjson/dist \
    -DCPACK_BINARY_TGZ=ON ../.. ;
  #- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
  #    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DEXTRA_CXX_FLAGS_RELEASE="-pthread" ../.. ; 
  #  fi
  - cmake --build . ;
  - cmake --build . --target install;
  - cmake --build . --target package;
  - popd; # return to sortmerna/

  # run tests
  - export PATH="$PWD/dist/bin:$PATH"
  - sortmerna --version
  - sortmerna -h
  - if [[ "$ENV" == "Linux+LLVM_clang-7" ]]; then python ./tests/test_sortmerna.py; fi
  #- if [[ "$ENV" == "Linux+gcc-7" ]]; then python ./tests/test_sortmerna_zlib.py; fi

after_success:
  # TODO: move to 'before_deploy' after testing
  - echo "move this to 'before_deploy' after testing'"
  - find ${TRAVIS_BUILD_DIR}/dist -type f
  - echo "Get git tag"
  - |
    xtag=$(git describe --exact-match HEAD 2>/dev/null); \
    if [[ ! -z "$xtag" ]]; then SMR_VER="${xtag:1}"; fi
  - echo "Deploying SMR version [$SMR_VER]"
  - pwd
  - env

before_deploy:
  - find ${TRAVIS_BUILD_DIR}/dist -type f
  - echo "Get git tag"
  - |
    xtag=$(git describe --exact-match HEAD 2>/dev/null); \
    if [[ ! -z "$xtag" ]]; then SMR_VER="${xtag:1}"; fi
  - echo "Deploying SMR version [$SMR_VER]"
  - pwd
  - env

deploy:
  provider: releases
  api_key: "GITHUB OAUTH TOKEN"
  file: 
    - ${TRAVIS_BUILD_DIR}/dist/sortmerna-${SMR_VER}-Linux.sh
    - ${TRAVIS_BUILD_DIR}/dist/sortmerna-${SMR_VER}-Linux.tar.gz
  overwrite: true
  skip_cleanup: true
  on:
    tags: true
    condition: $ENV = "Linux+LLVM_clang-7"
## END .travis.yml